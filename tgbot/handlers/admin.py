from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, KeyboardButton, ReplyKeyboardRemove
from tgbot.keyboards.inline import keyboard, keyboard_2, keyboard_3
from tgbot.filters.admin import AdminFilter
from tgbot.misc import SetStartMessage
from tgbot.keyboards import reply
from aiogram.methods import EditMessageReplyMarkup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import sqlite3

con = sqlite3.connect("db_SQLite.db")
cursor = con.cursor()

admin_router = Router()
admin_router.message.filter(AdminFilter())

@admin_router.message(CommandStart())
async def admin_start(message: Message, state: FSMContext):
    print(message.from_user.id)
    await state.clear()
    await message.reply("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!", reply_markup=reply.keyboard_menu)
    await message.answer('–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞:', reply_markup=keyboard)

@admin_router.callback_query(F.data == 'start_rename')
async def any_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SetStartMessage.set_message)
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è\n/start\n'
                                       '–ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç!', reply_markup=ReplyKeyboardRemove(remove_keyboard=True))

@admin_router.message(SetStartMessage.set_message)
async def set_start_message(message: Message, state: FSMContext):
     answer = message.text
     cursor.execute(f'''UPDATE text_command SET text_start = '{answer}' where id=1;''')
     con.commit()
     await state.clear()
     result = cursor.execute('''SELECT text_start FROM text_command where id=1;''').fetchone()[0]
     if result != 'None':
         await message.answer("‚úÖ –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=reply.keyboard_menu)
         await state.clear()
     else:
         await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è! ‚ùå\n"
                              "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ\n"
                              "—Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫–∏, —ç–º–æ–¥–∑–∏ ü•π", reply_markup=reply.keyboard_menu)

     con.commit()

@admin_router.callback_query(F.data == 'join_rename' )
async def any_callback_join(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SetStartMessage.set_message_join)
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ö–∞–Ω–∞–ª. –ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç!\n', reply_markup=ReplyKeyboardRemove(remove_keyboard=True))

@admin_router.message(SetStartMessage.set_message_join)
async def set_start_message_join(message: Message, state: FSMContext):
     answer_join = message.text
     await state.clear()
     result_join = cursor.execute(f'''UPDATE text_command SET text_join ='{answer_join}' where id=1;''')
     con.commit()
     print(result_join)

     if cursor.execute('''SELECT text_join FROM text_command where id=1;''').fetchone()[0] != 'None':
         await message.answer("‚úÖ –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ö–∞–Ω–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=reply.keyboard_menu)
         await state.clear()
         await message.answer('–î–æ–±–∞–≤–∏–º –ö–Ω–æ–ø–∫—Éüìå –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ?', reply_markup=keyboard_3)
     else:
         await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è! ‚ùå\n"
                              "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ\n"
                              "—Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫–∏, —ç–º–æ–¥–∑–∏ ü•π", reply_markup=reply.keyboard_menu)


@admin_router.callback_query(F.data == 'no')
async def no_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SetStartMessage.set_message_no)
    await callback.message.answer(text='–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç‚úÖ –ë–µ–∑ –∫–Ω–æ–ø–∫–∏', reply_markup=reply.keyboard_menu)
    cursor.execute('''UPDATE text_command SET text_join_button = NULL WHERE id = 1;''')
    con.commit()
    await state.clear()

@admin_router.callback_query(F.data == 'yes')
async def yes_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SetStartMessage.set_message_yes)
    await callback.message.answer(text='–î–∞‚úÖ –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–µ–º –∫–Ω–æ–ø–∫—É:\n–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç-–Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–∞—Ç! ', reply_markup=ReplyKeyboardRemove(remove_keyboard=True))

@admin_router.message(SetStartMessage.set_message_yes)
async def set_message_yes(message: Message, state: FSMContext):
    answer_join_button = message.text
    cursor.execute(f'''UPDATE text_command SET text_join_button = '{answer_join_button}' where id=1;''')
    con.commit()
    await state.clear()
    result_join = cursor.execute('''SELECT text_join_button FROM text_command where id=1;''').fetchone()[0]
    print(result_join)
    if result_join != 'None':
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç‚úÖ", reply_markup=reply.keyboard_menu)
        await state.clear()
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è! ‚ùå\n"
                             "–ö–Ω–æ–ø–∫–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ\n"
                             "—Ç–µ–∫—Å—Ç, —ç–º–æ–¥–∑–∏ ü•π", reply_markup=reply.keyboard_menu)
        await message.answer('–î–æ–±–∞–≤–∏–º –ö–Ω–æ–ø–∫—Éüìå –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ?', reply_markup=keyboard_3)

@admin_router.message(F.text == '‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é')
async  def set_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞:', reply_markup=keyboard)

@admin_router.callback_query(F.data == 'sender_users')
async  def sending(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer('‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞', reply_markup=keyboard_2)
    await callback.message.delete_reply_markup()
    await callback.message.delete()
    result_join = cursor.execute('''SELECT text_newsletter FROM text_command where id=1;''').fetchone()[0]
    sep = '...........................................................'
    await callback.message.answer(f'<b>–°–µ–π—á–∞—Å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ —Ç–∞–∫–æ–π:</b>\n{sep}\n{result_join}')


@admin_router.callback_query(F.data == 'cd_sms_sending')
async def yes_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SetStartMessage.cd_sms_sending)
    await callback.message.answer(text='–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –≤ —á–∞—Ç! ', reply_markup=ReplyKeyboardRemove(remove_keyboard=True))

@admin_router.message(SetStartMessage.cd_sms_sending)
async def set_message_yes(message: Message, state: FSMContext):
    text_newsletter = message.text
    cursor.execute(f'''UPDATE text_command SET text_newsletter = '{text_newsletter}' where id=1;''')
    con.commit()
    await state.clear()
    result_join = cursor.execute('''SELECT text_newsletter FROM text_command where id=1;''').fetchone()[0]
    print(result_join)
    if result_join != 'None':
        await message.answer("‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω", reply_markup=reply.keyboard_menu)
        await state.clear()
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è! ‚ùå\n"
                             "–°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ\n"
                             "—Ç–µ–∫—Å—Ç, —ç–º–æ–¥–∑–∏ ü•π", reply_markup=reply.keyboard_menu)