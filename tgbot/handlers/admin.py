from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, KeyboardButton, ReplyKeyboardRemove
from tgbot.keyboards.inline import keyboard, keyboard_2
from tgbot.filters.admin import AdminFilter
from tgbot.misc import SetStartMessage
from tgbot.keyboards import reply
from aiogram.methods import EditMessageReplyMarkup

import sqlite3

con = sqlite3.connect("db_SQLite.db")
cursor = con.cursor()

admin_router = Router()
admin_router.message.filter(AdminFilter())



@admin_router.message(CommandStart())
async def admin_start(message: Message, state: FSMContext):
    await state.clear()
    await message.reply("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!", reply_markup=reply.keyboard_menu)
    await message.answer('–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞:', reply_markup=keyboard)
    #await message.answer('111')

@admin_router.callback_query(F.data == 'start_rename')
async def any_callback(callback: CallbackQuery, state: FSMContext):
    # await callback.message.edit_reply_markup(reply_markup=None)
    # await callback.message.edit_reply_markup()
    await state.set_state(SetStartMessage.set_message)
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è\n/start\n'
                                       '–ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç!', reply_markup=ReplyKeyboardRemove(remove_keyboard=True))



@admin_router.message(SetStartMessage.set_message)
async def set_start_message(message: Message, state: FSMContext):
     # —Ç—É—Ç –±–µ—Ä–µ—à—å —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞—Å–æ–≤—ã–≤–∞–µ—à—å –≤ –ë–î
     answer = message.text
     cursor.execute('''UPDATE text_command SET text_start = ?;''', (answer,))
     con.commit()
     await state.clear() # –æ—á–∏—â–∞–µ—à—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     # await message.answer(f'–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ {answer}')
     result = cursor.execute('''SELECT text_start FROM text_command;''').fetchone()

     if result is not None and result[0] is not None:
         await message.answer("‚úÖ –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
     else:
         await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è! ‚ùå\n"
                              "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ\n"
                              "—Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫–∏, —ç–º–æ–¥–∑–∏ ü•π")

     con.commit()

@admin_router.callback_query(F.data == 'join_rename' )
async def any_callback_join(callback: CallbackQuery, state: FSMContext):
    #await callback.message.edit_text('–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç')
    await state.set_state(SetStartMessage.set_message_join)
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ö–∞–Ω–∞–ª. –ò –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç!\n')

@admin_router.message(SetStartMessage.set_message_join)
async def set_start_message_join(message: Message, state: FSMContext):
     # —Ç—É—Ç –±–µ—Ä–µ—à—å —Ç–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞—Å–æ–≤—ã–≤–∞–µ—à—å –≤ –ë–î
     answer_join = message.text
     cursor.execute('''UPDATE text_command SET text_join = ?;''', (answer_join,))
     con.commit()
     await state.clear() # –æ—á–∏—â–∞–µ—à—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
     # await message.answer(f'–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ {answer}')
     result_join = cursor.execute('''SELECT text_join FROM text_command;''').fetchone()

     if result_join is not None and result_join[0] is not None:
         await message.answer("‚úÖ –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ö–∞–Ω–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
     else:
         await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è! ‚ùå\n"
                              "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ\n"
                              "—Ç–µ–∫—Å—Ç, —Å—Å—ã–ª–∫–∏, —ç–º–æ–¥–∑–∏ ü•π")

     con.commit()

@admin_router.message(F.text == '‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é')
async  def set_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer('–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞:', reply_markup=keyboard)

@admin_router.callback_query(F.data == 'sender_users')
async  def sending(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer('‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞', reply_markup=keyboard_2)
    await callback.message.delete_reply_markup()
    await callback.message.delete()
